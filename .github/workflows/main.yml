name: deploy-gcwm-report-gen-lambda

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
      # 1) Check out your code
      - uses: actions/checkout@v3

      # 2) Enable arm64 + add Ubuntu ports repository for arm64 + install cross-OpenSSL dev
      - name: Prepare AArch64 OpenSSL
        run: |
          # enable multi-arch
          sudo dpkg --add-architecture arm64

          # point APT at the official ports archive for arm64 packages
          sudo tee /etc/apt/sources.list.d/arm64-ports.list <<EOF
deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports noble main universe restricted multiverse
deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports noble-updates main universe restricted multiverse
deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports noble-security main universe restricted multiverse
EOF

          # update & install cross-toolchain + arm64 OpenSSL dev
          sudo apt-get update
          sudo apt-get install -y \
            gcc-aarch64-linux-gnu \
            libc6-dev:arm64 \
            libssl-dev:arm64 \
            pkg-config-aarch64-linux-gnu

        # tell pkg-config to look in the AArch64 sysroot
        env:
          PKG_CONFIG_ALLOW_CROSS: "1"
          PKG_CONFIG_SYSROOT_DIR: "/usr/aarch64-linux-gnu"
          PKG_CONFIG_PATH: "/usr/aarch64-linux-gnu/lib/pkgconfig"

      # 3) Build & deploy to Lambda using the Rust action
      - name: Deploy code to Lambda
        uses: qxf2/rust-lambda-action@v1.0.1
        with:
          lambda_directory: '.'
          iam_role: ${{ secrets.AWS_IAM_ROLE }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

